#!/usr/bin/env python3
# Description {{{1
"""
Creates directory of files that should be archived in a safe place. With them, 
and your backups, you should be able to recover.

Usage:
    to-bank

Once created, copy the generated archive into two memory sticks, place one in my 
safe and one in my safe-deposit box. Then copy the archive to both backups and 
media using the following commands:
    scp -r 2018-12-15 backups:archives
    scp -r 2018-12-15 media:archives
"""

from inform import display, error, Error, os_error
from shlib import cd, chmod, cp, ls, mkdir, mount, rm, Run, set_prefs, to_path
from emborg.command import run_borg
from emborg.settings import Settings
from arrow import now
from gnupg import GPG
from avendesora import PasswordGenerator
from textwrap import dedent

set_prefs(use_inform=True)

AVENDESORA_ACCOUNT = 'login'
DECRYPT_SCRIPT = dedent(f'''\
    #!/bin/sh
    # Decrypts the archive.

    echo 'Use passcode for the {AVENDESORA_ACCOUNT} Avendesora account as key.'  
    gpg -d -o archive.tgz archive.tgz.gpg
    tar xvf archive.tgz
''')
REMOTE_DIR = 'backup/sparekeys'
SSH_REMOTES = [
        'guybrush',
        'kale@thekunderts.net',
]
MOUNT_REMOTES = [
        '~/usb',
]

# Default behavior:
# - Read config file
#   - .ssh and .gnupg by default
#
# Plugins:
# - avendesora:
#   - Add config path
#   - Provide password
#       - Priority, set-able via config.
#       - Raise something specific if can't get a password, will defer to next 
#         method.
#
# - emborg:
#   - Add 'borg key export' command.
#

# avendesora

def make_archive():
    date = now().format('YYYY-MM-DD')

    container = to_path(date)
    archive = to_path(container / 'archive')
    home = to_path('~')
    rm(container)
    mkdir(archive)

    # Copy ~/.gnupg
    # have to be careful on how ~/.gnupg is copied to avoid the socket
    #
    # KBK: I think rsync can take care of this...
    dest = (archive / 'gnupg').resolve()
    mkdir(dest)
    with cd(home / '.gnupg'):
        cp(*ls('.', reject='S.*'), dest)

    # Copy ~/.ssh
    cp(home / '.ssh', archive / 'ssh')

    # Copy directories from ~/.config
    dest = archive / 'config'
    mkdir(dest)
    cp(home / '.config/avendesora',      dest)
    cp(home / '.config/borg',            dest)
    cp(home / '.config/emborg',          dest)

    # Copy backup key (from remote).
    with Settings() as settings:
        cmd = 'borg key export'.split() + [
                settings.repository,
                archive / 'config/borg.repokey',
        ]
        run_borg(cmd, settings)

    # tar up the and encrypt the archive
    with cd(container):
        Run('tar cf archive.tgz archive', 'soeW')

        avendesora = PasswordGenerator()
        account = avendesora.get_account(AVENDESORA_ACCOUNT)
        gpg = GPG()
        with open('archive.tgz', 'rb') as f:
            contents = f.read()
        encrypted = gpg.encrypt(
            contents,
            recipients=None,
            symmetric=True,
            passphrase=str(account.passcode),
        )
        if encrypted.ok:
            with open('archive.tgz.gpg', 'w') as f:
                f.write(str(encrypted))
        else:
            error(encrypted.status)
        rm('archive.tgz', 'archive')
    script = container / 'decrypt'
    script.write_text(DECRYPT_SCRIPT)
    chmod(0o700, script, container / 'archive.tgz.gpg')
    display(date, 'created.')
    return container

def distribute_archive(archive):

    # Copy via ssh/scp
    for remote in SSH_REMOTES:
        Run(['ssh', remote, f'mkdir -p {REMOTE_DIR}'])
        Run(['scp', '-r', archive, f'{remote}:{REMOTE_DIR}'])
        display(archive, 'copied to', remote)

    # Copy to a mounted filesystem.
    for remote in MOUNT_REMOTES:
        try:
            with mount(remote):
                dest = to_path(remote, REMOTE_DIR)
                mkdir(dest)
                cp(archive, dest)
            display(archive, 'copied to', remote)
        except Error:
            raise
            error(remote, 'not mounted, skipping.')

try:
    path = make_archive()
    distribute_archive(path)

except Error as e:
    e.report()
except OSError as e:
    error(os_error(e))
