#!/usr/bin/env python3

# Import some useful names.
import sys, os, re
import itertools as it
from math import *
from pprint import pprint as pp

try: from pathlib import Path
except ImportError: pass

try: import more_itertools as mi
except ImportError: pass

try: import sh
except ImportError: pass

# Enable tab completion
try:
    import readline
except ImportError:
    print("Module readline not available.")
else:
    import rlcompleter
    if 'libedit' in readline.__doc__:
        readline.parse_and_bind("bind ^I rl_complete")
    else:
        readline.parse_and_bind("tab: complete")

# Make it seem like the big scientific libraries are imported without actually 
# importing them until they're used (because they each can take a few seconds 
# to import).

class LazyImporter(object):

    def __init__(self, module):
        self.module = module

    def __getattribute__(self, attr):
        import importlib
        modname = object.__getattribute__(self, 'module')
        module = importlib.import_module(modname)
        return getattr(module, attr)

np = LazyImporter('numpy')
pd = LazyImporter('pandas')
plt = LazyImporter('matplotlib.pyplot')

# Note: These two variables almost completely defeat the purpose of the 
# lazy-importers defined above...
a = np.arange(10)
df = pd.DataFrame([
    dict(a=1, b=1, x=np.random.random()),
    dict(a=2, b=1, x=np.random.random()),
    dict(a=3, b=1, x=np.random.random()),
    dict(a=1, b=2, x=np.random.random()),
    dict(a=2, b=2, x=np.random.random()),
    dict(a=3, b=2, x=np.random.random()),
])

