#!/usr/bin/env python

import os
import sys
import time
import fcntl
import select

import sys
import select
import tty
import termios

import threading

# Don't think I ever really got this to work, but the idea is to run a command 
# while printing out a timestamp regularly.
#
# Maybe a better way to do this is:
#
# - Run the program and the heartbeat in a background thread.
# - Send all stdout/stderr to a foreground thread in a queue.
# - Print out everything that appears in the queue.

class InputThread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):

        while 1:
            try:
                line = sys.stdin.readline()
            except KeyboardInterrupt:
                break

            if not line:
                break

            sys.stdout.write(line)
            sys.stdout.flush()

class HeartbeatThread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.daemon = True

    def run(self):

        while True:
            time.sleep(1)
            print time.strftime('%m/%d/%y %H:%M:%S')


threads = [ InputThread(), HeartbeatThread() ]
#threads = [ InputThread() ]
#threads = [ HeartbeatThread() ]

for thread in threads:
    thread.start()

"""{
while 1:
    try:
        line = sys.stdin.readline()
    except KeyboardInterrupt:
        break

    if not line:
        break

    sys.stdout.write(line)
    sys.stdout.flush()
}"""

"""{
def isData():
    return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])

old_settings = termios.tcgetattr(sys.stdin)
try:
    tty.setcbreak(sys.stdin.fileno())

    while True:

        while isData():
            c = sys.stdin.read(1)
            if c == '\x1b':         # x1b is ESC
                break
            else:
                sys.stdout.write(c)
                sys.stdout.flush()

        print time.strftime('%m/%d/%y %H:%M:%S')
        time.sleep(1)


finally:
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)

}"""

"""{
poll = select.poll()

poll.register(sys.stdin.fileno(), select.POLLIN)
poll.register(sys.stdin.fileno(), select.POLLHUP)

while True:

    for file, event in poll.poll(0):

        if event == select.POLLIN:
            output = sys.stdin.read()
            sys.stdout.write(output)

        if event == select.POLLHUP:
            break

        print event

    #print time.strftime('%m/%d/%y %H:%M:%S')
    time.sleep(1)
}"""

"""{
fd = sys.stdin.fileno()
fl = fcntl.fcntl(fd, fcntl.F_GETFL)
fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

def nonblocking_read():
    #return output.read()
    try: return sys.stdin.read()
    except IOError: return ""

while True:

    output = nonblocking_read()
    sys.stdout.write(output)

    print time.strftime('%m/%d/%y %H:%M:%S')
    time.sleep(1)
}"""
