#!/usr/bin/env python3

"""\
Query different aspects of nucleotide sequences.

Usage:
    dna rev [<seq>]
    dna comp [<seq>]
    dna rc [<seq>]
    dna gc [<seq>]
    dna gcplot [<seq>] [-w <window>]
    dna tm [<seq>]
    dna len [<seq>]
    dna mw [<seq>] [--ss]
    dna rand <bp> [<seed>]

Options:
    --ss
        Indicate that the given sequence is single-stranded.

    -w --window <size>      [default: 20]
        Indicate how big a window to use when plotting GC%.
"""

import numpy as np

def reverse(sequence):
    return sequence[::-1]

def complement(sequence):
    complements = str.maketrans('ACTGactg', 'TGACtgac')
    return sequence.translate(complements)

def reverse_complement(sequence):
    return reverse(complement(sequence))

def gc_content(sequence):
    from Bio.SeqUtils import GC
    return GC(sequence) / 100

def plot_gc_content(sequence, window=20):
    import numpy as np
    import matplotlib.pyplot as plt
    from more_itertools import windowed

    gc = [
            gc_content(''.join(x))
            for x in windowed(sequence, window)
    ]
    i = np.arange(len(gc)) + 1

    try:
        plt.plot(i, gc)
        plt.xlabel('Position')
        plt.ylabel('GC%')
        plt.ylim(0, 1)
        plt.xlim(min(i), max(i))
        plt.show()
    except KeyboardInterrupt:
        print()

def melting_temp(sequence):
    from Bio.SeqUtils import MeltingTemp
    from Bio.Seq import Seq
    seq = Seq(sequence)
    tm = MeltingTemp.Tm_NN(seq)
    return tm

def molecular_weight(sequence, double_stranded=True):
    sequence = sequence.upper()

    a = sequence.count('A')
    c = sequence.count('C')
    g = sequence.count('G')
    t = sequence.count('T')

    if double_stranded:
        return ((a + t) * 617.4) + ((g + c) * 618.4) - 124
    else:
        return (a * 313.2) + (t * 304.2) + (c * 289.2) + (g * 329.2) - 62

def random_sequence(n, seed=0):
    import random; random.seed(seed)

    pop = 'ATCG' * (n // 4)
    pop += ''.join(random.sample('ATCG', n - len(pop)))

    return ''.join(random.sample(pop, n))


if __name__ == '__main__':
    import docopt
    args = docopt.docopt(__doc__)

    if args['rand']:
        seq = random_sequence(
            int(args['<bp>']),
            int(args['<seed>'] or 0),
        )
        print(seq)
        raise SystemExit

    seq = args['<seq>']

    if seq in (None, '-'):
        seq = input()

    if args['rev']:
        print(reverse(seq))
    if args['comp']:
        print(complement(seq))
    if args['rc']:
        print(reverse_complement(seq))
    if args['gc']:
        gc = gc_content(seq)
        print(f'{100 * gc:.1f}%')
    if args['gcplot']:
        plot_gc_content(seq, int(args['--window']))
    if args['tm']:
        tm = melting_temp(seq)
        print(f'{tm:.1f}Â°C')
    if args['mw']:
        mw = molecular_weight(seq, not args['--ss'])
        print(f'{mw:.1f} Da')
    if args['len']:
        print(len(seq))


