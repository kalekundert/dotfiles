#!/usr/bin/env zsh
set -euo pipefail
IFS=$'\n\t'

BACKUP_HOST="kale@guybrush.ucsf.edu"
PRIVATE_KEY="-oIdentityFile=/home/kale/.ssh/backup_rsa"
FULL_OR_INCREMENTAL=""

EMAIL_ADDRESS="kale@thekunderts.net"
EMAIL_SUBJECT="Backup Report for `date +%D`"
EMAIL_BODY=$(mktemp /tmp/backup.XXXXXXX)

function cleanup {
    rm $EMAIL_BODY
}
trap cleanup EXIT

# Parse any command-line options. {{{1 

ARGUMENTS=`getopt -o frvh -l full,report,verbose,help -n backup -- $*`
test $? != 0 && exit 1
eval set -- $ARGUMENTS

FULL_OR_INCREMENTAL=""
SEND_REPORT=""
DISPLAY_HELP=""
VERBOSITY="notice"

while true; do

    case "$1" in

        (-f | --full)       FULL_OR_INCREMENTAL="full"; shift 1     ;;
        (-r | --report)     SEND_REPORT="true"; shift 1             ;;
        (-h | --help)       DISPLAY_HELP="true"; shift 1            ;;
        (-v | --verbose)    VERBOSITY="debug"; set -x; shift 1      ;;
        (*)                 break;                                  ;;

    esac
done

# Display a help message, if requested. {{{1

if [ -n "$DISPLAY_HELP" ]; then
    echo "Usage:"
    echo "    backup [options]"
    echo
    echo "Options:"
    echo "    -l, --list-files"
    echo "        List the files to be backed up."
    echo
    echo "    -f, --full"
    echo "        Force a full backup to be performed."
    echo
    echo "    -r, --report"
    echo "        Send an email report to the address given in the script."
    echo
    echo "    -v, --verbose"
    echo "        Print each command that is executed."
    echo 
    echo "    -h, --help"
    echo "        Display this help message.  No backups are performed."
    echo 
    exit 0
fi

# }}}1

duplicity $FULL_OR_INCREMENTAL                  \
    ~                                           \
    --progress                                  \
    --no-encryption                             \
    --allow-source-mismatch                     \
    --full-if-older-than 6M                     \
    --verbosity "$VERBOSITY"                    \
    --ssh-options "$PRIVATE_KEY"                \
    --include-filelist ~/.backuprc              \
    rsync://$BACKUP_HOST//home/kale/backups     |& tee --append $EMAIL_BODY

duplicity remove-all-but-n-full 1               \
    --force                                     \
    --allow-source-mismatch                     \
    --verbosity "$VERBOSITY"                    \
    --ssh-options "$PRIVATE_KEY"                \
    rsync://$BACKUP_HOST//home/kale/backups     |& tee --append $EMAIL_BODY

# Find how much space backups are using. {{{1

BACKUP_SIZE=`ssh $PRIVATE_KEY $BACKUP_HOST du -sh /home/kale/backups`
BACKUP_SIZE=`echo $BACKUP_SIZE | cut -f 1`

echo -e "\nSpace used by backups: $BACKUP_SIZE" |& tee --append $EMAIL_BODY

# Send an email report, if requested. {{{1

if [ -n "$SEND_REPORT" ]; then
    mail -s "$EMAIL_SUBJECT" $EMAIL_ADDRESS < $EMAIL_BODY
fi

# }}}1
