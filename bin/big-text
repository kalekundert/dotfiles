#!/usr/bin/env python

import sys, gtk, pygtk, pango
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--size', '-s', default=28, type=int)
arguments = parser.parse_args()


class BigText:

    def __init__(self):
        # create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_position(gtk.WIN_POS_CENTER)
    
        # When the window is given the "delete_event" signal (this is given
        # by the window manager, usually by the "close" option, or on the
        # titlebar), we ask it to call the delete_event () function
        # as defined above. The data passed to the callback
        # function is NULL and is ignored in the callback function.
        self.window.connect("delete_event", self.delete_event)
    
        # Here we connect the "destroy" event to a signal handler.  
        # This event occurs when we call gtk_widget_destroy() on the window,
        # or if we return FALSE in the "delete_event" callback.
        self.window.connect("destroy", self.destroy)
    
        # Sets the border width of the window.
        self.window.set_border_width(10)
    
        # Creates a new button with the label "Hello World".
        self.entry = gtk.TextView()
    
        font = pango.FontDescription('Lucida Sans %d' % arguments.size)
        self.entry.modify_font(font)
        #self.entry.set_width_chars(24)

        # This packs the button into the window (a GTK container).
        self.window.add(self.entry)
    
        # The final step is to display this newly created widget.
        self.entry.show()
    
        # and the window
        self.window.show()

    def main(self):
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        gtk.main()

    def delete_event(self, widget, event, data=None):
        # Change FALSE to TRUE and the main window will not be destroyed
        # with a "delete_event".
        return False

    def destroy(self, widget, data=None):
        gtk.main_quit()


# If the program is run directly or passed as an argument to the python
# interpreter then create a HelloWorld instance and show it

if __name__ == "__main__":
    big_text = BigText()
    big_text.main()

