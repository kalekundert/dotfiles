# Commands {{{1
alias quit='exit'
alias logout='gnome-session-quit --logout --force'
alias xsu='exec su'
alias top='\top -u $USER'
alias topall='\top'
alias date='\date +"%A, %B %-d%n%-I:%M %p"'
alias which='/bin/which'
alias where='whereis'
alias len='wc -c'
alias ,ale=make
alias make!='make clean && make'
alias catf='tail -v -n +1'
alias ssh-guybrush-proxy='ssh -fND 1080 guybrush-proxy'
alias pg='ping google.com'
alias pk='ping kxgames.net'
alias path='echo $PATH | \tr ":" "\n" | nl'

function findn () {
  if [ $# -eq 1 ]; then
    FIND_DIR=.
    FIND_NAME=$1
  elif [ $# -eq 2 ]; then
    FIND_DIR=$1
    FIND_NAME=$2
  fi

  find $FIND_DIR -name "*$FIND_NAME*"
}

# Config files {{{1
alias xx="exec zsh"
alias xrc="echo Restart the shell to reload the configuration."
alias edal="vim $RC/zsh/aliases.zsh && xrc"
alias edrc="vim $RC/misc/zshrc && xrc"
alias edvar="vim $RC/zsh/variables.zsh && xrc"
alias edpath="vim $RC/zsh/path.zsh && xrc"
alias edopt="vim $RC/zsh/options.zsh && xrc"
alias edpkg="vim $RC/bin/bump-arch"
alias edpip="vim $RC/bin/bump-pip"
alias edvi='vim ~/.config/nvim/init.vim'
alias edob='vim ~/.config/openbox/scripts/keyboard.py'
alias reob='~/.config/openbox/reconfigure.sh'
alias edav='nvim ~/.config/avendesora/accounts.gpg && chmod 600 ~/.config/avendesora/accounts.gpg'
alias edsw='vim ~/.config/stepwise/conf.toml'

# Applications {{{1

function xls() {
  if [ $# -eq 0 ]; then
    fork libreoffice --calc
  elif [ -e "$1" ]; then
    # This Stack Overflow questions describes how to read a document from 
    # stdin, e.g.:
    #   
    #   libreoffice --calc =(2c show_payments -1)
    #
    # Unfortunately, it doesn't work with this alias because (I think) the file 
    # is closed after the `[ -e "$1" ]` check.  I'll have to think about 
    # whether there's a reasonable way to deal with this...
    fork libreoffice --calc $1
  else
    touch "Sheet 1.tsv"
    libreoffice --headless --convert-to xlsx "Sheet 1.tsv"
    rm -f "Sheet 1.tsv"
    mv    "Sheet 1.xlsx" $1
    fork libreoffice --calc $1
  fi
}
alias xlsx=xls

alias term='fork alacritty'
alias doc='fork libreoffice'
alias img='fork gpicview'
alias ruler='fork screenruler'
alias chemdraw='fork /opt/chemaxon/marvinsuite/MarvinSketch'
alias monitor='fork arandr'

alias av=avendesora
alias arandr='fork arandr'
alias abiword='fork abiword'
alias chrome='fork google-chrome-stable'
alias civ='steam steam://rungameid/8930'
alias ron='steam steam://rungameid/287450'
alias rontap=ron
alias dia='fork dia'
alias electrum-gui='fork electrum'
alias eom='fork eom'
alias exfalso='fork exfalso'
alias firefox='fork firefox'
alias qute='fork qutebrowser'
alias fonts='fork gnome-specimen'
alias gimp='fork gimp'
alias gnumeric='fork gnumeric'
alias gparted='sudo gparted'
alias gtkpod='fork gtkpod'
alias handbrake='fork ghb'
alias latex-help='za /usr/share/texlive/texmf-dist/doc/latex/base/source2e.pdf'
alias lo='fork libreoffice'
alias lyx='fork lyx'
alias masterpdf='fork masterpdfeditor4'
alias mendeley='fork /home/kale/research/software/projects/mendeley/bin/mendeleydesktop'
alias mysql-workbench='fork mysql-workbench'
alias pithos='fork pithos'
alias plasmids='fork gnumeric ~/research/inventory/plasmids.xml'
alias pymol='fork pymol -qx'
alias pymol1='fork pymol -qx -d "set assembly, 1"'

function pymol-assm() {
  fork pymol -qx -d "set assembly, $2" $1
}

alias pymol-tk='fork pymol -q'
alias pyspread='fork pyspread'
alias qiv='fork qiv'
alias quodlibet='fork quodlibet'
alias rhythmbox='fork rhythmbox'
alias scribus='fork scribus'
alias skype='fork skype'
alias snap='snapgene'
alias sqliteman='fork sqliteman'
alias tad='fork tad'
alias thunderbird='fork thunderbird'
alias vlc='fork vlc'
alias zeal='fork zeal'
alias zoom='fork zoom'

function pymol-pdb () {
  fork pymol -qx $(pdbcif $@)
}

function imagej () {
    # These Java options don't seem to really do anything, so they're here more 
    # aspirationally than anything.
    export _JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel"
    fork /home/kale/research/software/third_party/fiji/ImageJ-linux64 $(realpath $1)
}
function snapgene () {
    if [ $# -ge 1 ]; then
      fork snapgene $( realpath -m "$@")
    else
      fork snapgene
    fi
}
function snapgene-viewer () {
    if [ $# -ge 1 ]; then
      fork snapgene-viewer $( realpath -m "$@")
    else
      fork snapgene-viewer
    fi
}

# The zsh completion system doesn't seem to work very well on aliases.  Since I 
# have a custom completion script for evince, I had to write the 'fork' alias 
# as a shell function instead.  (I would have written it as a one-liner, but 
# that confuses bash.)

function pdf () {
    fork sioyek $@
}

function za () {
    fork zathura $@
}

function zathura () {
    fork zathura $@
}

function sioyek () {
    fork zathura $@
}

function evince () {
    fork evince $@
}

function inkscape () {(
    # Inkscape expects python to be python2, so remove my python3 from the PATH
    #export PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin
    fork inkscape $@
)}
alias ink=inkscape

function libcirc () {(
    cd ~/kxgames/third_party/liberation-circuit-1.0/bin
    ./libcirc
)}

# If nautilus is not given an argument, run it on the current working directory 
# instead of the home directory.

function nautilus () {
    if [ $# -eq 0 ]; then
        fork nautilus .
    else
        fork nautilus
    fi
}
# }}}1

# cd {{{1
alias cd..='cd ..'
alias pu='pushd'
alias po='popd'
alias back='cd ~-'
alias here='cd -P .'
alias up='cd "$(/bin/ls -d -1 */ | dmenu -i)"'

function cdd () {
  cd $(dirname $1)
}

# ls {{{1

# In some directories, I like to have more control over what 'ls' displays.  
# For example, sometimes I like to sort files alphabetically and sometimes I 
# like to sort them by file extension.  
#
# To get this behavior, I have 'ls' look for an '.lsrc' file before executing.  
# If such a file is found, then that file is executed in lieu of 'ls' itself.  
# Otherwise, 'ls' is run.  By default, a few file extensions are ignored.
#
# This is still a pretty rough implementation.  It's easy to get around (i.e.  
# by passing any arguments to 'ls') and the '.lsrc' files are hard to write.  I 
# might have to write a more involved python script to get around these issues.

function ls () {
    if [ $# -eq 1 ] && [ -e '.lsrc' ]; then
        ./.lsrc
    else
        /bin/ls $@                                                          \
            -h                                                              \
            -v                                                              \
            -X                                                              \
            --color                                                         \
            --group-directories-first                                       \
            --hide="*~"                                                     \
            --hide="*.pyc"                                                  \
            --hide="\#*\#"                                                  \
            --hide="*.aux"                                                  \
            --hide="*.nlo"                                                  \
            --hide="*.bbl"                                                  \
            --hide="*.blg"                                                  \
            --hide="_minted-*"                                              \
            --hide="__pycache__"                                            \
            --hide="lost+found"                                             \
            --hide="autom4te.cache"                                         \
            --hide="Makefile.in"                                            \
            --hide="aclocal.m4"                                             \
            --hide="autom4te.cache"                                         \
            --hide="databases-incognito"                                    \
            --hide="VideoDecodeStats"                                       \
            --hide="tags"                                                      \
            --hide="*.egg-info"
    fi
}

# There are a lot of ways that I tend to misspell 'ls'.

alias l='ls'
alias s='ls'
alias sl='ls'
alias ld='ls'
alias ks='ls'
alias sk='ls'
alias lls='ls'
alias lks='ls'
alias la='ls -A'
alias ll='ls -l'
alias lr='ls -R'
alias lsd='ls -d */'

alias lstif='ls *.tif'

alias lcd='cd'
alias dc='cd'

# rm {{{1

# https://unix.stackexchange.com/questions/46535/can-i-make-rm-interactive-only-when-using-globbing-in-either-bash-or-zsh-or

alias rm='noglob rm'
function rm() {
  [[ "$*" = *[*[?]* ]] && set -- -i "$@"
  command rm $~@
}

# cp/mv/ln {{{1
alias cr='cp -r'

alias zmv='noglob zmv -W'
alias zcp='noglob zmv -W -p cp'
alias zln='noglob zmv -W -p ln'

# grep {{{1

alias -g G=' | grep'
alias -g V=' | grep -v'

# head/less {{{1

alias -g H=' | head'
alias -g L=' | less'

# I use this to limit the output from `rustc`.  It might be useful for other 
# compilers too.
alias -g HC50='--color=always 2>&1 | head -n50'
alias -g LC='--color=always 2>&1 | less'

# sudo {{{1
alias yum='sudo dnf'
alias pacman='sudo pacman'
alias apt-get='sudo apt-get'
alias apt-cache='sudo apt-get'
alias virt-manager='sudo virt-manager'
alias reboot='sudo reboot'
alias shutdown='sudo shutdown now'
alias updatedb='sudo updatedb'
alias powertop='sudo powertop'
alias zzz='sudo pm-suspend'

# vim {{{1
alias vim='vim'
alias gvim='gvim'
alias vi='vim'
alias m='gvim'
alias givm='gvim'
alias gvss='gvim +"set guifont=Monospace\ 18" +"set nospell"'

# 2024/04/20: I redefined this alias to use `fork` because gvim started 
# producing a bunch of warnings.  Hopefully these will be resolved eventually, 
# and I can go back to the simple alias.
#alias v='fork gvim -f'
alias v=gvim

function gblog () {
    gvim ~/personal/blog/content/$@
}

# I have a tendency to accidentally type these vim commands into the shell, and 
# I don't like seeing the "command not found" errors that result.

alias :w='true'
alias :q='true'
alias :wq='true'

# git {{{1
# Most of the aliases I use are provided by the oh-my-zsh git plugin.

alias gs='git status'
alias gd='git diff'
alias ga='git add'
alias grs='git restore'
alias gc='git commit'
alias gce='git commit -F $(git root)/.git/COMMIT_EDITMSG -e'
alias gc!='git commit --amend --no-edit'
alias gl='git log'
alias glo='git log --oneline --decorate'
alias gk='git checkout'
alias gp='git pull'
alias gpu='git pull && git push'
alias gpup='git pull && git push && sleep 300 && git pull'
alias gu='git push'
alias guf!='git push --force'

function gda () {
  git diff $1

  read "REPLY?Add $1 [Y/p/n]: "
  if [[ $REPLY =~ '^[Yy]?$' ]]; then
    echo "git add $1"
    git add $1
  elif [[ $REPLY =~ '^[Pp]$' ]]; then
    git add -p $1
  else
    echo "abort"
  fi
}

# https://stackoverflow.com/questions/19439333/how-do-you-use-an-existing-completion-for-a-function-in-zsh
compdef _git gda=git-add

# python {{{1
alias py=python3
alias py2=python2
alias py3=python3

alias ruff='ruff check'

# For compiling C extensions
alias pipno='pip install --no-deps --no-build-isolation --no-cache-dir'

alias py-exec-prefix='python -c "import sys; print(sys.exec_prefix)"'
alias py-site-packages='python -c "import sysconfig; print(sysconfig.get_paths()[\"purelib\"])"'

# Sometimes I want to run small snippets of python code without launching the 
# entire interpreter.  Usually this is either to do a bit of arithmetic (pxp) 
# or to get help on simple objects (pxh).

imports="from math import *"

function px () {
    python3 -c "$imports; $*"
}

function pxp () {
    python3 -c "$imports; print($*)"
}

function pxh () {
    python3 -c "$imports; help($1)"
}

alias px="noglob px"
alias pxp="noglob pxp"
alias pxh="noglob pxh"

function django () {
  $(git root)/manage.py "$@"
}

# java {{{1
alias ja='java -ea'
alias jc='javac -g'
alias ju='java org.junit.runner.JUnitCore'

# R {{{1
alias R='R --no-save'

# make {{{1
alias make!='make clean && make'

# two cents {{{1
alias 2c='two_cents'

# ultralist {{{1
alias todo='ultralist'
alias tl='ultralist l by p'
alias tll='ultralist l agenda'
alias tln='ultralist ln'
alias ta='ultralist a'
alias te='ultralist e'
alias ten='ultralist en'
alias td='ultralist d'
alias tdn='ultralist dn'
alias tx='ultralist ex'
alias tc='ultralist c'
alias tuc='ultralist uc'
alias tp='ultralist p'
alias tup='ultralist up'
alias tr='ultralist ar'
alias trc='ultralist ar completed'
alias tgc='ultralist ar garbage-collect'

function tat() {
  ultralist add "$@" due today
}

# exmemo {{{1
alias es='exmemo note status'
alias eu='exmemo note update'
alias en='exmemo note new'
alias ee='exmemo note edit'
alias eo='exmemo note open'
alias eb='exmemo note build'
alias el='exmemo note ls'
alias ew='exmemo note browse'
alias eww='exmemo note browse -w'
alias edl='exmemo data ls'
alias edy='exmemo data sync'
alias edk='exmemo data link'
alias edg='exmemo data gel'

function ed () {
    d=$(exmemo note directory "$@")
    [ $? = 0 ] && cd $d || echo $d  # Don't try to cd if something goes wrong.
}

# stepwise {{{1
alias sw=stepwise

# freezerbox {{{1
alias fq='freezerbox query'

# rosetta {{{1
alias rk='rdt_stub'
alias rb='rdt_build debug'
alias rr='rdt_build release'
alias ru='rdt_unit_test'
alias rd='rdt_doxygen'

alias beautify_changed_files_in_branch="python2 ~/rosetta/tools/python_cc_reader/beautify_changed_files_in_branch.py"
alias beautify_specific_files="python2 ~/rosetta/tools/python_cc_reader/beautify_specific_files.py"

# nextflow {{{1
alias nf=nextflow

# duckdb {{{1
alias duck='duckdb -readonly'

# vim: fdm=marker
